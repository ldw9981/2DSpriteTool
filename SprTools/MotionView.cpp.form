// MotionView.cpp : implementation file
//

#include "stdafx.h"
#include "SprTools.h"
#include "MotionView.h"


// CMotionView

IMPLEMENT_DYNCREATE(CMotionView, CFormView)

CMotionView::CMotionView()
	: CFormView(CMotionView::IDD)
{

}

CMotionView::~CMotionView()
{
}

void CMotionView::DoDataExchange(CDataExchange* pDX)
{
	CFormView::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_MOTION_TAB, m_MotionTabCtrl);
}

BEGIN_MESSAGE_MAP(CMotionView, CFormView)
	ON_WM_ACTIVATE()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_MOTION_ADD, &CMotionView::OnBnClickedMotionAdd)
	ON_WM_CREATE()
	ON_WM_SIZE()
END_MESSAGE_MAP()


// CMotionView diagnostics

#ifdef _DEBUG
void CMotionView::AssertValid() const
{
	CFormView::AssertValid();
}

#ifndef _WIN32_WCE
void CMotionView::Dump(CDumpContext& dc) const
{
	CFormView::Dump(dc);
}
#endif
#endif //_DEBUG


// CMotionView message handlers

void CMotionView::OnInitialUpdate()
{
	CFormView::OnInitialUpdate();

	// TODO: Add your specialized code here and/or call the base class

	CSize total;
	total.cx=3000;
	total.cy=500;
	SetScrollSizes(MM_TEXT,total);
}

void CMotionView::OnActivate(UINT nState, CWnd* pWndOther, BOOL bMinimized)
{
	CFormView::OnActivate(nState, pWndOther, bMinimized);

	// TODO: Add your message handler code here
}

void CMotionView::OnDestroy()
{
	CFormView::OnDestroy();

	// TODO: Add your message handler code here
}

void CMotionView::OnBnClickedMotionAdd()
{
	// TODO: Add your control notification handler code here

}

int CMotionView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CFormView::OnCreate(lpCreateStruct) == -1)
		return -1;

	// TODO:  Add your specialized creation code here
	TRACE(_T("CMotionView::OnCreate()\n"));	
//	GetClientRect(&m_ClientRect);

	CClientDC dc(this);
	m_MemDC.Init(&dc,500,600);
	return 0;
}

void CMotionView::OnSize(UINT nType, int cx, int cy)
{
	CFormView::OnSize(nType, cx, cy);

	// TODO: Add your message handler code here
	TRACE(_T("CMotionView::OnSize(%d,%d,%d)\n"),nType,cx,cy);	
	GetClientRect(&m_ClientRect);
}

void CMotionView::OnDraw(CDC* pDC)
{
	// TODO: Add your specialized code here and/or call the base class

	pDC->BitBlt(0,0,500,600,&m_MemDC,0,0,SRCCOPY);

}
